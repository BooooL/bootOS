     1                                          ;
     2                                          ; bootOS, an operating system in 512 bytes
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ; http://nanochess.org/
     6                                          ;
     7                                          ; Creation date: Jul/21/2019. 6pm 10pm
     8                                          ; Revision date: Jul/22/2019. Optimization, corrections and comments.
     9                                          ; Revision date: Jul/31/2019. Added a service table and allows
    10                                          ;                             filenames/sources/targets from any segment.
    11                                          ;                             'del' command now shows errors.
    12                                          ;
    13                                  
    14                                          cpu 8086
    15                                  
    16                                          ;
    17                                          ; What is bootOS:
    18                                          ; 
    19                                          ;   bootOS is a monolithic operating system that fits in
    20                                          ;   one boot sector. It's able to load, execute, and save
    21                                          ;   programs. Also keeps a filesystem. It can work with
    22                                          ;   any floppy disk size starting at 180K.
    23                                          ; 
    24                                          ;   It relocates itself at 0000:7a00 and requires further
    25                                          ;   768 bytes of memory starting at 0000:7700.
    26                                          ; 
    27                                          ;   This operating system runs programs as boot sectors
    28                                          ;   at 0000:7c00. 
    29                                          ; 
    30                                          ;   It provides the following services:
    31                                          ;      int 0x20   Exit to operating system.
    32                                          ;      int 0x21   Input key and show in screen.
    33                                          ;                 Entry: none
    34                                          ;                 Output: AL = ASCII key pressed.
    35                                          ;                 Affects: AH/BX/BP.
    36                                          ;      int 0x22   Output character to screen.
    37                                          ;                 Entry: AL = Character.
    38                                          ;                 Output: none.
    39                                          ;                 Affects: AH/BX/BP.
    40                                          ;      int 0x23   Load file.
    41                                          ;                 Entry: DS:BX = Filename terminated with zero.
    42                                          ;                        ES:DI = Point to source data (512 bytes)
    43                                          ;                 Output: Carry flag = 0 = Found, 1 = Not found.
    44                                          ;                 Affects: All registers (including ES).
    45                                          ;      int 0x24   Save file.
    46                                          ;                 Entry: DS:BX = Filename terminated with zero.
    47                                          ;                        ES:DI = Point to data target (512 bytes)
    48                                          ;                 Output: Carry flag = 0 = Successful. 1 = Error.
    49                                          ;                 Affects: All registers (including ES).
    50                                          ;      int 0x25   Delete file.
    51                                          ;                 Entry: DS:BX = Filename terminated with zero.
    52                                          ;                 Affects: All registers (including ES).
    53                                          ;
    54                                          ; 
    55                                          ; Filesystem organization:
    56                                          ;
    57                                          ;   bootOS uses tracks from 0 to 32, side 0, sector 1.
    58                                          ;
    59                                          ;   The directory is contained in track 0, side 0, sector 2.
    60                                          ;
    61                                          ;   Each entry in the directory is 16 bytes wide, and
    62                                          ;   contains the ASCII name of the file finished with a
    63                                          ;   zero byte. A sector has a capacity of 512 bytes, it
    64                                          ;   means only 32 files can be kept on a floppy disk.
    65                                          ;
    66                                          ;   Deleting a file is a matter of zeroing a whole entry.
    67                                          ;
    68                                          ;   Each file is one sector long. Its location in the
    69                                          ;   disk is derived from its position in the directory.
    70                                          ;
    71                                          ;   The 1st file is located at track 1, side 0, sector 1.
    72                                          ;   The 2nd file is located at track 2, side 0, sector 1.
    73                                          ;   The 32nd file is located at track 32, side 0, sector 1.
    74                                          ;
    75                                          ;
    76                                          ; Starting bootOS:
    77                                          ;
    78                                          ;   Just make sure to write it at the boot sector of a
    79                                          ;   floppy disk. It can work with any floppy disk size
    80                                          ;   (360K, 720K, 1.2MB and 1.44MB) and it will waste the
    81                                          ;   disk space as only uses the first two sectors of the
    82                                          ;   disk and then the first sector of each following
    83                                          ;   track.
    84                                          ;
    85                                          ;   For emulation make sure to deposit it at the start
    86                                          ;   of a .img file of 360K, 720K or 1440K. (at least
    87                                          ;   VirtualBox detects the type of disk by the length
    88                                          ;   of the image file)
    89                                          ;
    90                                          ;   For Mac OS X and Linux you can create a 360K image
    91                                          ;   in this way:
    92                                          ; 
    93                                          ;     dd if=/dev/zero of=oszero.img count=719 bs=512
    94                                          ;     cat os.img oszero.img >osbase.img
    95                                          ; 
    96                                          ;   Replace 719 with 1439 for 720K, or 2879 for 1.44M.
    97                                          ; 
    98                                          ;   Tested with VirtualBox for Mac OS X running Windows XP
    99                                          ;   running it, it also works with qemu:
   100                                          ; 
   101                                          ;     qemu-system-x86_64 -fda os.img
   102                                          ; 
   103                                          ; Running bootOS:
   104                                          ;
   105                                          ;   The first time you should enter the 'format' command,
   106                                          ;   so it initializes the directory. It also copies itself
   107                                          ;   again to the boot sector, this is useful to init new
   108                                          ;   disks.
   109                                          ;
   110                                          ; bootOS commands:
   111                                          ;
   112                                          ;   ver           Shows the version (none at the moment)
   113                                          ;   dir           Shows the directory's content.
   114                                          ;   del filename  Deletes the "filename" file.
   115                                          ;   format        As explained before.
   116                                          ;   enter         Allows to enter up to 512 hexadecimal
   117                                          ;                 bytes to create another file.
   118                                          ;
   119                                          ;                 Notice the line size is 128 characters so
   120                                          ;                 you must break the input into chunks of
   121                                          ;                 4, 8 or 16 bytes.
   122                                          ;
   123                                          ;                 It also allows to copy the last executed
   124                                          ;                 program just press Enter when the 'h' prompt
   125                                          ;                 appears and type the new name.
   126                                          ;
   127                                          ; For example: (Character + is Enter key)
   128                                          ;   
   129                                          ;   $enter+
   130                                          ;   hbb 17 7c 8a 07 84 c0 74 0c 53 b4 0e bb 0f 00 cd+
   131                                          ;   h10 5b 43 eb ee cd 20 48 65 6c 6c 6f 2c 20 77 6f+
   132                                          ;   h72 6c 64 0d 0a 00+
   133                                          ;   h+
   134                                          ;   *hello+
   135                                          ;   $dir+
   136                                          ;   hello
   137                                          ;   $hello+
   138                                          ;   Hello, world
   139                                          ;   $
   140                                          ;
   141                                          ; bootOS programs: (Oh yes! we have software support)
   142                                          ;
   143                                          ;   fbird         https://github.com/nanochess/fbird
   144                                          ;   Pillman       https://github.com/nanochess/pillman
   145                                          ;   invaders      https://github.com/nanochess/invaders
   146                                          ;   bootBASIC     https://github.com/nanochess/bootBASIC
   147                                          ;
   148                                          ; You can copy the machine code directly using the 'enter'
   149                                          ; command, or you can create a file with signature bytes
   150                                          ; with the same command and later copy the binary into the
   151                                          ; .img file using the signature bytes as a clue to locate
   152                                          ; the right position in the image file.
   153                                          ;
   154                                          ; Or you can find a pre-designed disk image along this Git
   155                                          ; with the name osall.img
   156                                          ;
   157                                  
   158                                  stack:  equ 0x7700      ; Stack pointer (grows to lower addresses)
   159                                  line:   equ 0x7780      ; Buffer for line input
   160                                  sector: equ 0x7800      ; Sector data for directory
   161                                  osbase: equ 0x7a00      ; bootOS location
   162                                  boot:   equ 0x7c00      ; Boot sector location  
   163                                  
   164                                  entry_size:     equ 16  ; Directory entry size
   165                                  sector_size:    equ 512 ; Sector size
   166                                  max_entries:    equ sector_size/entry_size
   167                                  
   168                                          ;
   169                                          ; Cold start of bootOS
   170                                          ;
   171                                          ; Notice it is loaded at 0x7c00 (boot) and needs to
   172                                          ; relocate itself to 0x7a00 (osbase), the instructions
   173                                          ; between 'start' and 'ver_command' shouldn't depend
   174                                          ; on the assembly location (osbase) because these
   175                                          ; are running at boot location (boot).
   176                                          ;
   177                                          org osbase
   178                                  start:
   179 00000000 31C0                            xor ax,ax       ; Set all segments to zero
   180 00000002 8ED8                            mov ds,ax
   181 00000004 8EC0                            mov es,ax
   182 00000006 8ED0                            mov ss,ax
   183 00000008 BC0077                          mov sp,stack    ; Set stack to guarantee data safety
   184                                  
   185 0000000B FC                              cld             ; Clear D flag.
   186 0000000C BE007C                          mov si,boot     ; Copy bootOS boot sector...
   187 0000000F BF007A                          mov di,osbase   ; ...into osbase
   188 00000012 B9EC01                          mov cx,int_0x20-start
   189 00000015 F3A4                            rep movsb
   190                                  
   191                                                          ; SI now points to int_0x20 
   192 00000017 BF8000                          mov di,0x0020*4 ; Address of service for int 0x20
   193 0000001A B106                            mov cl,6
   194                                  .load_vec:
   195 0000001C A5                              movsw           ; Copy IP address
   196 0000001D AB                              stosw           ; Copy CS address
   197 0000001E E2FC                            loop .load_vec
   198                                  
   199                                          ;
   200                                          ; 'ver' command
   201                                          ;
   202                                  ver_command:
   203 00000020 BE[BC01]                        mov si,intro
   204 00000023 E84901                          call output_string
   205 00000026 CD20                            int int_restart ; Restart bootOS
   206                                  
   207                                          ;
   208                                          ; Warm start of bootOS
   209                                          ;
   210                                  restart:
   211 00000028 FC                              cld             ; Clear D flag.
   212 00000029 0E                              push cs         ; Reinit all segment registers
   213 0000002A 0E                              push cs
   214 0000002B 0E                              push cs
   215 0000002C 1F                              pop ds
   216 0000002D 07                              pop es
   217 0000002E 17                              pop ss
   218 0000002F BC0077                          mov sp,stack    ; Restart stack
   219                                  
   220 00000032 B024                            mov al,'$'      ; Command prompt
   221 00000034 E80901                          call input_line ; Input line
   222                                  
   223 00000037 803C00                          cmp byte [si],0x00  ; Empty line?
   224 0000003A 74EC                            je restart          ; Yes, get another line
   225                                  
   226 0000003C BF[C801]                        mov di,commands ; Point to commands list
   227                                  
   228                                          ; Notice that filenames starting with same characters
   229                                          ; won't be recognized as such (so file dirab cannot be
   230                                          ; executed).
   231                                  os11:
   232 0000003F 8A05                            mov al,[di]     ; Read length of command in chars
   233 00000041 47                              inc di
   234 00000042 25FF00                          and ax,0x00ff   ; Is it zero?
   235 00000045 7411                            je os12         ; Yes, jump
   236 00000047 91                              xchg ax,cx
   237 00000048 56                              push si         ; Save current position
   238 00000049 F3A6                            rep cmpsb       ; Compare statement
   239 0000004B 7504                            jne os14        ; Equal? No, jump
   240 0000004D FF15                            call word [di]  ; Call command process
   241 0000004F EBD7                            jmp restart     ; Go to expect another command
   242                                  
   243 00000051 01CF                    os14:   add di,cx       ; Advance the list pointer
   244 00000053 47                              inc di          ; Avoid the address
   245 00000054 47                              inc di
   246 00000055 5E                              pop si
   247 00000056 EBE7                            jmp os11        ; Compare another statement
   248                                  
   249 00000058 89F3                    os12:   mov bx,si       ; Input pointer
   250 0000005A BF007C                          mov di,boot     ; Location to read data
   251 0000005D CD23                            int int_load_file       ; Load file
   252 0000005F 7202                            jc os7          ; Jump if error
   253 00000061 FFE3                            jmp bx
   254                                  
   255                                          ;
   256                                          ; File not found error
   257                                          ;
   258                                  os7:
   259 00000063 BE[C301]                        mov si,error_message
   260 00000066 E80601                          call output_string
   261 00000069 CD20                            int int_restart ; Go to expect another command
   262                                  
   263                                          ;
   264                                          ; >> COMMAND <<
   265                                          ; del filename
   266                                          ;
   267                                  del_command:
   268                                  os22:
   269 0000006B 89F3                            mov bx,si       ; Copy SI (buffer pointer) to BX
   270 0000006D AC                              lodsb
   271 0000006E 3C20                            cmp al,0x20     ; Avoid spaces
   272 00000070 74F9                            je os22
   273 00000072 CD25                            int int_delete_file
   274 00000074 72ED                            jc os7
   275 00000076 C3                              ret
   276                                  
   277                                          ;
   278                                          ; 'dir' command
   279                                          ;
   280                                  dir_command:
   281 00000077 E8A300                          call read_dir           ; Read the directory
   282                                  
   283                                  os18:
   284 0000007A 803F00                          cmp byte [bx],0         ; Empty entry?
   285 0000007D 7407                            je os17                 ; Yes, jump
   286 0000007F 53                              push bx
   287 00000080 89DE                            mov si,bx               ; Point to data
   288 00000082 E8EA00                          call output_string      ; Show name
   289 00000085 5B                              pop bx
   290 00000086 83C310                  os17:   add bx,entry_size       ; Advance one entry
   291 00000089 80FF7A                          cmp bh,(sector+sector_size)>>8       ; Finished sector?
   292 0000008C 75EC                            jne os18                ; No, jump
   293 0000008E C3                              ret                     ; Return
   294                                  
   295                                          ;
   296                                          ; Get filename length and prepare for directory lookup
   297                                          ; Entry:
   298                                          ;   si = pointer to string
   299                                          ; Output:
   300                                          ;   si = unaffected
   301                                          ;   di = pointer to start of directory
   302                                          ;   cx = length of filename including zero terminator
   303                                          ;
   304                                  filename_length:
   305 0000008F 56                              push si
   306 00000090 31C9                            xor cx,cx       ; cx = 0
   307                                  .loop:
   308 00000092 AC                              lodsb           ; Read character.
   309 00000093 41                              inc cx          ; Count character.
   310 00000094 3C00                            cmp al,0        ; Is it zero (end character)?
   311 00000096 75FA                            jne .loop       ; No, jump.
   312                                  
   313 00000098 5E                              pop si
   314 00000099 BF0078                          mov di,sector   ; Point to start of directory.
   315 0000009C C3                              ret
   316                                          
   317                                          ;
   318                                          ; >> SERVICE <<
   319                                          ; Load file
   320                                          ;
   321                                          ; Entry:
   322                                          ;   ds:bx = Pointer to filename ended with zero byte.
   323                                          ;   es:di = Destination.
   324                                          ; Output:
   325                                          ;   Carry flag = Set = not found, clear = successful.
   326                                          ;
   327                                  load_file:
   328 0000009D 57                              push di         ; Save destination
   329 0000009E 06                              push es
   330 0000009F E84000                          call find_file  ; Find the file (sanitizes ES)
   331 000000A2 B402                            mov ah,0x02     ; Read sector
   332                                  os25:
   333 000000A4 07                              pop es
   334 000000A5 5B                              pop bx          ; Restore destination on BX
   335 000000A6 7203                            jc int_cf       ; Jump if error
   336 000000A8 E88400                          call disk       ; Do operation with disk
   337                                                          ; Carry guaranteed to be clear.
   338                                  int_cf:
   339 000000AB 89E5                            mov bp,sp
   340 000000AD D05604                          rcl byte [bp+4],1       ; Insert Carry flag in Flags (automatic usage of SS)
   341 000000B0 CF                              iret
   342                                  
   343                                          ;
   344                                          ; >> SERVICE <<
   345                                          ; Save file
   346                                          ;
   347                                          ; Entry:
   348                                          ;   ds:bx = Pointer to filename ended with zero byte.
   349                                          ;   es:di = Source.
   350                                          ; Output:
   351                                          ;   Carry flag = Set = error, clear = good.
   352                                          ;
   353                                  save_file:
   354 000000B1 57                              push di                 ; Save origin
   355 000000B2 06                              push es
   356 000000B3 53                              push bx                 ; Save filename pointer
   357 000000B4 CD25                            int int_delete_file     ; Delete previous file (sanitizes ES)
   358 000000B6 5B                              pop bx                  ; Restore filename pointer
   359 000000B7 E8D5FF                          call filename_length    ; Prepare for lookup
   360                                  
   361 000000BA 26803D00                .find:  es cmp byte [di],0      ; Found empty directory entry?
   362 000000BE 7407                            je .empty               ; Yes, jump and fill it.
   363 000000C0 E83700                          call next_entry
   364 000000C3 75F5                            jne .find
   365 000000C5 EBDD                            jmp os25
   366                                  
   367 000000C7 57                      .empty: push di
   368 000000C8 F3A4                            rep movsb               ; Copy full name into directory
   369 000000CA E85A00                          call write_dir          ; Save directory
   370 000000CD 5F                              pop di
   371 000000CE E83200                          call get_location       ; Get location of file
   372 000000D1 B403                            mov ah,0x03             ; Write sector
   373 000000D3 EBCF                            jmp os25
   374                                  
   375                                          ;
   376                                          ; >> SERVICE <<
   377                                          ; Delete file
   378                                          ;
   379                                          ; Entry:
   380                                          ;   ds:bx = Pointer to filename ended with zero byte.
   381                                          ; Output:
   382                                          ;   Carry flag = Set = not found, clear = deleted.
   383                                          ;
   384                                  delete_file:
   385 000000D5 E80A00                          call find_file          ; Find file (sanitizes ES)
   386 000000D8 72D1                            jc int_cf               ; If carry set then not found, jump.
   387 000000DA B91000                          mov cx,entry_size
   388 000000DD E84300                          call write_zero_dir     ; Fill whole entry with zero. Write directory.
   389 000000E0 EBC9                            jmp int_cf
   390                                  
   391                                          ;
   392                                          ; Find file
   393                                          ;
   394                                          ; Entry:
   395                                          ;   ds:bx = Pointer to filename ended with zero byte.
   396                                          ; Result:
   397                                          ;   es:di = Pointer to directory entry
   398                                          ;   Carry flag = Clear if found, set if not found.
   399                                  find_file:
   400 000000E2 53                              push bx
   401 000000E3 E83700                          call read_dir   ; Read directory (sanitizes ES)
   402 000000E6 5E                              pop si
   403 000000E7 E8A5FF                          call filename_length    ; Get filename length and setup DI
   404                                  os6:
   405 000000EA 56                              push si
   406 000000EB 57                              push di
   407 000000EC 51                              push cx
   408 000000ED F3A6                            repe cmpsb      ; Compare name with entry
   409 000000EF 59                              pop cx
   410 000000F0 5F                              pop di
   411 000000F1 5E                              pop si
   412 000000F2 740F                            je get_location ; Jump if equal.
   413 000000F4 E80300                          call next_entry
   414 000000F7 75F1                            jne os6         ; No, jump
   415 000000F9 C3                              ret             ; Return
   416                                  
   417                                  next_entry:
   418 000000FA 83C710                          add di,entry_size               ; Go to next entry.
   419 000000FD 81FF007A                        cmp di,sector+sector_size       ; Complete directory?
   420 00000101 F9                              stc                             ; Error, not found.
   421 00000102 C3                              ret
   422                                  
   423                                          ;
   424                                          ; Get location of file on disk
   425                                          ;
   426                                          ; Entry:
   427                                          ;   DI = Pointer to entry in directory.
   428                                          ;
   429                                          ; Result
   430                                          ;   CH = Track number in disk.
   431                                          ;   CL = Sector (always 0x01).
   432                                          ;
   433                                          ; The position of a file inside the disk depends on its
   434                                          ; position in the directory. The first entry goes to
   435                                          ; track 1, the second entry to track 2 and so.
   436                                          ;
   437                                  get_location:
   438 00000103 8D851088                        lea ax,[di-(sector-entry_size)] ; Get entry pointer into directory
   439                                                          ; Plus one entry (files start on track 1)
   440 00000107 B104                            mov cl,4        ; 2^(8-4) = entry_size
   441 00000109 D3E0                            shl ax,cl       ; Shift left and clear Carry flag
   442 0000010B 40                              inc ax          ; AL = Sector 1
   443 0000010C 91                              xchg ax,cx      ; CH = Track, CL = Sector
   444 0000010D C3                              ret
   445                                  
   446                                          ;
   447                                          ; >> COMMAND <<
   448                                          ; format
   449                                          ;
   450                                  format_command:
   451 0000010E BF0078                          mov di,sector   ; Fill whole sector to zero
   452 00000111 B90002                          mov cx,sector_size
   453 00000114 E80C00                  	call write_zero_dir
   454 00000117 BB007A                          mov bx,osbase   ; Copy bootOS onto first sector
   455 0000011A 49                              dec cx
   456 0000011B EB12                    	jmp disk
   457                                  
   458                                          ;
   459                                          ; Read the directory from disk
   460                                          ;
   461                                  read_dir:
   462 0000011D 0E                              push cs         ; bootOS code segment...
   463 0000011E 07                              pop es          ; ...to sanitize ES register
   464 0000011F B402                            mov ah,0x02
   465 00000121 EB06                    	jmp disk_dir
   466                                  
   467                                  write_zero_dir:
   468 00000123 B000                            mov al,0
   469 00000125 F3AA                            rep stosb
   470                                  
   471                                          ;
   472                                          ; Write the directory to disk
   473                                          ;
   474                                  write_dir:
   475 00000127 B403                            mov ah,0x03
   476                                  disk_dir:
   477 00000129 BB0078                          mov bx,sector
   478 0000012C B90200                          mov cx,0x0002
   479                                          ;
   480                                          ; Do disk operation.
   481                                          ;
   482                                          ; Input:
   483                                          ;   AH = 0x02 read disk, 0x03 write disk
   484                                          ;   ES:BX = data source/target
   485                                          ;   CH = Track number
   486                                          ;   CL = Sector number
   487                                          ;
   488                                  disk:
   489 0000012F 50                              push ax
   490 00000130 53                              push bx
   491 00000131 51                              push cx
   492 00000132 06                              push es
   493 00000133 B001                            mov al,0x01     ; AL = 1 sector
   494 00000135 31D2                            xor dx,dx       ; DH = Drive A. DL = Head 0.
   495 00000137 CD13                            int 0x13
   496 00000139 07                              pop es
   497 0000013A 59                              pop cx
   498 0000013B 5B                              pop bx
   499 0000013C 58                              pop ax
   500 0000013D 72F0                            jc disk         ; Retry
   501 0000013F C3                              ret
   502                                  
   503                                          ;
   504                                          ; Input line from keyboard
   505                                          ; Entry:
   506                                          ;   al = prompt character
   507                                          ; Result:
   508                                          ;   buffer 'line' contains line, finished with CR
   509                                          ;   SI points to 'line'.
   510                                          ;
   511                                  input_line:
   512 00000140 CD22                            int int_output_char ; Output prompt character
   513 00000142 BE8077                          mov si,line     ; Setup SI and DI to start of line buffer
   514 00000145 89F7                            mov di,si       ; Target for writing line
   515 00000147 3C08                    os1:    cmp al,0x08     ; Backspace?
   516 00000149 7502                            jne os2
   517 0000014B 4F                              dec di          ; Undo the backspace write
   518 0000014C 4F                              dec di          ; Erase a character
   519 0000014D CD21                    os2:    int int_input_key  ; Read keyboard
   520 0000014F 3C0D                            cmp al,0x0d     ; CR pressed?
   521 00000151 7502                            jne os10
   522 00000153 B000                            mov al,0x00
   523 00000155 AA                      os10:   stosb           ; Save key in buffer
   524 00000156 75EF                            jne os1         ; No, wait another key
   525 00000158 C3                              ret             ; Yes, return
   526                                  
   527                                          ;
   528                                          ; Read a key into al
   529                                          ; Also outputs it to screen
   530                                          ;
   531                                  input_key:
   532 00000159 B400                            mov ah,0x00
   533 0000015B CD16                            int 0x16
   534                                          ;
   535                                          ; Screen output of character contained in al
   536                                          ; Expands 0x0d (CR) into 0x0a 0x0d (LF CR)
   537                                          ;
   538                                  output_char:
   539 0000015D 3C0D                            cmp al,0x0d
   540 0000015F 7506                            jne os3
   541 00000161 B00A                            mov al,0x0a
   542 00000163 CD22                            int int_output_char
   543 00000165 B00D                            mov al,0x0d
   544                                  os3:
   545 00000167 B40E                            mov ah,0x0e     ; Output character to TTY
   546 00000169 BB0700                          mov bx,0x0007   ; Gray. Required for graphic modes
   547 0000016C CD10                            int 0x10        ; BIOS int 0x10 = Video
   548 0000016E CF                              iret
   549                                  
   550                                          ;
   551                                          ; Output string
   552                                          ;
   553                                          ; Entry:
   554                                          ;   SI = address
   555                                          ;
   556                                          ; Implementation:
   557                                          ;   It supposes that SI never points to a zero length string.
   558                                          ;
   559                                  output_string:
   560 0000016F AC                              lodsb                   ; Read character
   561 00000170 CD22                            int int_output_char     ; Output to screen
   562 00000172 3C00                            cmp al,0x00             ; Is it 0x00 (terminator)?
   563 00000174 75F9                            jne output_string       ; No, the loop continues
   564 00000176 B00D                            mov al,0x0d
   565 00000178 CD22                            int int_output_char
   566 0000017A C3                              ret
   567                                  
   568                                          ;
   569                                          ; 'enter' command
   570                                          ;
   571                                  enter_command:
   572 0000017B BF007C                          mov di,boot             ; Point to boot sector
   573 0000017E 57                      os23:   push di
   574 0000017F B068                            mov al,'h'              ; Prompt character
   575 00000181 E8BCFF                          call input_line         ; Input line
   576 00000184 5F                              pop di
   577 00000185 803C00                          cmp byte [si],0         ; Empty line?
   578 00000188 7412                            je os20                 ; Yes, jump
   579 0000018A E81C00                  os19:   call xdigit             ; Get a hexadecimal digit
   580 0000018D 73EF                            jnc os23
   581 0000018F B104                            mov cl,4
   582 00000191 D2E0                            shl al,cl
   583 00000193 91                              xchg ax,cx
   584 00000194 E81200                          call xdigit             ; Get a hexadecimal digit
   585 00000197 08C8                            or al,cl
   586 00000199 AA                              stosb                   ; Write one byte
   587 0000019A EBEE                            jmp os19                ; Repeat loop to complete line
   588                                  os20:        
   589 0000019C B02A                            mov al,'*'              ; Prompt character
   590 0000019E E89FFF                          call input_line         ; Input line with filename
   591 000001A1 56                              push si
   592 000001A2 5B                              pop bx
   593 000001A3 BF007C                          mov di,boot             ; Point to data entered
   594 000001A6 CD24                            int int_save_file       ; Save new file
   595 000001A8 C3                              ret
   596                                  
   597                                          ;
   598                                          ; Convert ASCII letter to hexadecimal digit
   599                                          ;
   600                                  xdigit:
   601 000001A9 AC                              lodsb
   602 000001AA 3C00                            cmp al,0x00             ; Zero character marks end of line
   603 000001AC 740D                            je os15
   604 000001AE 2C30                            sub al,0x30             ; Avoid spaces (anything below ASCII 0x30)
   605 000001B0 72F7                            jc xdigit
   606 000001B2 3C0A                            cmp al,0x0a
   607 000001B4 7205                            jc os15
   608 000001B6 2C07                            sub al,0x07
   609 000001B8 240F                            and al,0x0f
   610 000001BA F9                              stc
   611                                  os15:
   612 000001BB C3                              ret
   613                                  
   614                                          ;
   615                                          ; Our amazing presentation line
   616                                          ;
   617                                  intro:
   618 000001BC 626F6F744F5300                  db "bootOS",0
   619                                  
   620                                  error_message:
   621 000001C3 4F6F707300                      db "Oops",0
   622                                  
   623                                          ;
   624                                          ; Commands supported by bootOS
   625                                          ;
   626                                  commands:
   627 000001C8 03646972                        db 3,"dir"
   628 000001CC [7700]                          dw dir_command
   629 000001CE 06666F726D6174                  db 6,"format"
   630 000001D5 [0E01]                          dw format_command
   631 000001D7 05656E746572                    db 5,"enter"
   632 000001DD [7B01]                          dw enter_command
   633 000001DF 0364656C                        db 3,"del"
   634 000001E3 [6B00]                          dw del_command
   635 000001E5 03766572                        db 3,"ver"
   636 000001E9 [2000]                          dw ver_command
   637 000001EB 00                              db 0
   638                                  
   639                                  int_restart:            equ 0x20
   640                                  int_input_key:          equ 0x21
   641                                  int_output_char:        equ 0x22
   642                                  int_load_file:          equ 0x23
   643                                  int_save_file:          equ 0x24
   644                                  int_delete_file:        equ 0x25
   645                                  
   646                                  int_0x20:
   647 000001EC [2800]                          dw restart          ; int 0x20
   648 000001EE [5901]                          dw input_key        ; int 0x21
   649 000001F0 [5D01]                          dw output_char      ; int 0x22
   650 000001F2 [9D00]                          dw load_file        ; int 0x23
   651 000001F4 [B100]                          dw save_file        ; int 0x24
   652 000001F6 [D500]                          dw delete_file      ; int 0x25
   653                                  
   654 000001F8 4F<rept>                        times 510-($-$$) db 0x4f
   655 000001FE 55AA                            db 0x55,0xaa            ; Make it a bootable sector
